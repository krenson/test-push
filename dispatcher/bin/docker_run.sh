#!/bin/sh
#
# Script to run docker dispatcher image with entries generated by validator
#
# Usage: docker_run.sh dump-folder aemhost:aemport localport [env]
# or: docker_run.sh dump-folder aemhost:aemport test [env]
#

usage() {
    cat <<EOF >& 1
Usage: $0 deployment-folder aem-host:aem-port localport
or: $0 deployment-folder aem-host:aem-port test

Examples:
  # Use deployment folder "out", start dispatcher container on port 8080, for AEM running on myhost:4503
  $0 out myhost:4503 8080

  # Same as above, but AEM runs on your host at port 4503
  $0 out host.docker.internal:4503 8080

  # Same as above, but simulate a stage environment
  DISP_RUN_MODE=stage $0 out host.docker.internal:4503 8080

  # Same as above, but set dispatcher log level to debug to see HTTP traffic to the backend
  DISP_LOG_LEVEL=trace1 $0 out host.docker.internal:4503 8080

  # Same as above, but set rewrite log level to trace2 to see how your RewriteRules get applied
  REWRITE_LOG_LEVEL=trace2 $0 out host.docker.internal:4503 8080

  # Use deployment folder "out", start httpd -t to test the configuration, dump processed dispatcher.any config
  # (note: provided aemhost needs to be resolvable, using "localhost" is possible)
  $0 out localhost:4503 test

Environment variables available:
  DISP_RUN_MODE:     defines the environment type or run mode.
                     Valid values are dev, stage or prod (default is dev)
  DISP_LOG_LEVEL:    sets the dispatcher log level
                     Valid values are trace1, debug, info, warn or error (default is warn)
  REWRITE_LOG_LEVEL: sets the rewrite log level
                     Valid values are trace1-trace8, debug, info, warn or error (default is warn)
EOF
    exit 1
}

error() {
    echo >&2 "** error: $1"
    exit 2
}

[ $# -eq 3 ] || usage

folder=$1
shift

aemhostport=$1
shift

aemhost=$(echo "${aemhostport}" | sed -En 's/([^:]+):.*/\1/p')
aemport=$(echo "${aemhostport}" | sed -En 's/.+:([0-9]+)/\1/p')
{ [ -n "${aemhost}" ] || [ -n "${aemport}" ]; } || error "host:port combination expected, got: ${aemhostport}"

localport=$1
shift

command -v docker >/dev/null 2>&1 || error "docker not found, aborting."

volumes="-v ${PWD}/cache:/mnt/var/www"
config_dir=/etc/httpd
httpd_dir=${config_dir}/conf.d
dispatcher_dir=${config_dir}/conf.dispatcher.d

# Make folder path absolute for docker volume mount
first=$(echo "${folder}" | sed 's/\(.\).*/\1/')
if [ "${first}" != "/" ]
then
    folder=${PWD}/${folder}
fi

[ -d "${folder}" ] || error "deployment folder not found: ${folder}"
if [ -f "${folder}/values.csv" ]
then
	# Process files in generated folder and generate volume argument
	echo "values.csv found in deployment folder: ${folder} - using files listed there"
    for file in $(tr "," "\n" < "${folder}"/values.csv)
    do
        case ${file} in
        clientheaders_any)
            volumes="-v ${folder}/${file}:${dispatcher_dir}/clientheaders/clientheaders.any:ro ${volumes}"
            ;;
        custom_vars)
            volumes="-v ${folder}/${file}:${httpd_dir}/variables/custom.vars:ro ${volumes}"
            ;;
        farms_any)
            volumes="-v ${folder}/${file}:${dispatcher_dir}/enabled_farms/farms.any:ro ${volumes}"
            ;;
        filters_any)
            volumes="-v ${folder}/${file}:${dispatcher_dir}/filters/filters.any:ro ${volumes}"
            ;;
        global_vars)
            volumes="-v ${folder}/${file}:${httpd_dir}/variables/global.vars:ro ${volumes}"
            ;;
        rewrite_rules)
            volumes="-v ${folder}/${file}:${httpd_dir}/rewrites/rewrite.rules:ro ${volumes}"
            ;;
        rules_any)
            volumes="-v ${folder}/${file}:${dispatcher_dir}/cache/rules.any:ro ${volumes}"
            ;;
        virtualhosts_any)
            volumes="-v ${folder}/${file}:${dispatcher_dir}/virtualhosts/virtualhosts.any:ro ${volumes}"
            ;;
        vhosts_conf)
            volumes="-v ${folder}/${file}:${httpd_dir}/enabled_vhosts/vhosts.conf:ro ${volumes}"
            ;;
        esac
    done
else
    # Process files in configs source folder and generate volume argument
    echo "values.csv not found in deployment folder: ${folder} - using files in 'conf.d' and 'conf.dispatcher.d' subfolders directly"
    for relativeSubfolder in "conf.d" "conf.dispatcher.d"
    do
        echo "processing configuration subfolder: $relativeSubfolder"
        subfolder="${folder}/${relativeSubfolder}"
        [ -d "${subfolder}" ] || error "${relativeSubfolder} configuration subfolder not found in: ${folder}"
        for file in $(find "${subfolder}" -type f -or -type l | grep -Ev '/.git')
        do
            resolved="$(cd -P "$(dirname "$file")" && pwd -P)"
            fullpath=${resolved}/$(basename "${file}")
            relativepath=${relativeSubfolder}/${fullpath#*/${relativeSubfolder}/}
            volumes="-v ${fullpath}:${config_dir}/${relativepath} ${volumes}"
        done
    done
fi

envvars="--env AEM_HOST=${aemhost} --env AEM_PORT=${aemport}"
if [ -n "${DISP_RUN_MODE}" ]; then
    case "${DISP_RUN_MODE}" in
        dev|stage|prod)
            envvars="$envvars --env ENVIRONMENT_TYPE=${DISP_RUN_MODE}"
            ;;
        *)
            error "unknown environment type: ${DISP_RUN_MODE} (expected dev, stage or prod)"
            ;;
    esac
fi
if [ -n "${DISP_LOG_LEVEL}" ]; then
    case "${DISP_LOG_LEVEL}" in
        [Tt]race1 | [Dd]ebug | [Ii]nfo | [Ww]arn | [Ee]rror)
            envvars="$envvars --env DISP_LOG_LEVEL=${DISP_LOG_LEVEL}"
            ;;
        *)
            error "unknown dispatcher log level: ${DISP_LOG_LEVEL} (expected trace1, debug, info, warn or prod)"
            ;;
    esac
fi
if [ -n "${REWRITE_LOG_LEVEL}" ]; then
    case "${REWRITE_LOG_LEVEL}" in
        [Tt]race[1-8] | [Dd]ebug | [Ii]nfo | [Ww]arn | [Ee]rror)
            envvars="$envvars --env REWRITE_LOG_LEVEL=${REWRITE_LOG_LEVEL}"
            ;;
        *)
            error "unknown rewrite log level: ${REWRITE_LOG_LEVEL} (expected trace1-trace8, debug, info, warn or prod)"
            ;;
    esac
fi

repo=adobe
image=aem-ethos/dispatcher-publish
version=2.0.57 # MANUALLY UPDATED FROM 2.0.88
imageurl="${repo}/${image}:${version}"

if [ -z "$(docker images -q "${imageurl}" 2> /dev/null)" ]; then
    echo "Required image not found, trying to load from archive..."
    file=$(dirname "$0")/dispatcher-publish.tar.gz
    [ -f "${file}" ] || error "unable to find archive at expected location: $file"
    gunzip -c "${file}" | docker load
    [ -n "$(docker images -q "${imageurl}" 2> /dev/null)" ] || error "required image still not found: $imageurl"
fi

if [ "${localport}" = "test" ]; then
    cmd="docker run --rm ${volumes} ${envvars} ${imageurl} /usr/sbin/httpd-test"
else
    cmd="docker run --rm -p ${localport}:80 ${volumes} ${envvars} ${imageurl}"
fi
eval "$cmd"
